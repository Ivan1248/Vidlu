
# backbone

backbone.conv1 
backbone.backbone_intermediate.module.root.conv.orig

backbone.bn1
backbone.backbone_intermediate.module.root.norm.orig

backbone.layer{a}.{b}.conv{c}
backbone.backbone_intermediate.module.features.unit{a-1}_{b}.branchout.block.conv{c-1}.orig

backbone.layer{a}.{b}.bn{c}
backbone.backbone_intermediate.module.features.unit{a-1}_{b}.branchout.block.norm{c-1}.orig

backbone.layer{a}.{b}.downsample.0
backbone.backbone_intermediate.module.features.unit{a-1}_{b}.branchout.shortcut.conv.orig

backbone.layer{a}.{b}.downsample.1
backbone.backbone_intermediate.module.features.unit{a-1}_{b}.branchout.shortcut.norm.orig

# spp

backbone.spp.spp.spp_bn.norm
backbone.context.input_block.norm0.orig

backbone.spp.spp.spp_bn.conv
backbone.context.input_block.conv0.orig

backbone.spp.spp.spp_fuse.norm
backbone.context.fuse_block.norm0.orig

backbone.spp.spp.spp_fuse.conv
backbone.context.fuse_block.conv0.orig

# ladder

backbone.upsample.{a}.bottleneck.norm
backbone.ladder.upsample_blends.{a}.parallel.project.norm0.orig

backbone.upsample.{a}.bottleneck.conv
backbone.ladder.upsample_blends.{a}.parallel.project.conv0.orig

backbone.upsample.{a}.blend_conv.norm
backbone.ladder.upsample_blends.{a}.blend.norm0.orig

backbone.upsample.{a}.blend_conv.conv
backbone.ladder.upsample_blends.{a}.blend.conv0.orig

logits.norm
backbone.norm.orig

# logits

logits.conv
head.logits.orig


################################################################################

# backbone

backbone.{a:conv|bn}1
backbone.backbone_intermediate.module.root.{a:bn->norm}.orig

backbone.layer{a:(\d+)}.{b:(\d+)}.{c:conv|bn}{d:(\d+)}
backbone.backbone_intermediate.module.features.unit{`int(a)-1`}_{b}.branchout.block.{c:bn->norm}{`int(d)-1`}.orig

backbone.layer{a}.{b}.downsample.{c:0|1}
backbone.backbone_intermediate.module.features.unit{`int(a)-1`}_{b}.branchout.shortcut.{c:0->conv|1->norm}.orig

# spp

backbone.spp.spp.{a:spp_bn|spp_fuse}.{b:norm|conv}
backbone.context.{a:spp_bn->input_block|spp_fuse->fuse_block}.{b}0.orig

backbone.spp.spp.spp{a}.{b:norm|conv}
backbone.context.pyramid_blocks.block{a}.{b}0.orig

# ladder

backbone.upsample.{a}.{b:bottleneck|blend_conv}.{c:norm|conv}
backbone.ladder.upsample_blends.{a}.{b:bottleneck->parallel.project|blend_conv->blend}.{c}0.orig

logits.norm
backbone.norm.orig

# logits

logits.conv
head.logits.orig


################################################################################
\w\.

# backbone

backbone.{:backbone_intermediate.module.root.}{conv|bn:norm}{1:.orig}

backbone.{layer:backbone_intermediate.module.features.unit}{`x`(\d+):`int(x)-1`}{.:_}{(\d+)}.{conv|bn:norm}{`x`(\d+):`int(x)-1`}{:.orig}

backbone.{layer:backbone_intermediate.module.features.unit}{`x`(\d+):`int(x)-1`}{.:_}{(\d+)}.{downsample:branchout.shortcut}.{0:conv|1:norm}{:.orig}

# spp

backbone.{spp.spp:context}.{spp_bn:input_block|spp_fuse:fuse_block}.{norm|conv}{:0.orig}

backbone.{spp.spp.spp:context.pyramid_blocks.block}{(\d+)}.{norm|conv}{:0.orig}

# ladder

backbone.{:ladder.}upsample{:_blends}.{(\d+)}.{bottleneck:parallel.project|blend_conv:blend}.{norm|conv}{:0.orig}

{logits.norm:backbone.norm.orig}

# logits

{logits.conv:head.logits.orig}


grammar

expression ::= expression expression | pattern | translation_expression
pattern ::= constant | regex_pattern
constant ::= [\w\.]*
regex_pattern ::= '(' REGEX ')'
translation_expression ::= '{' translation '}'
translation ::= translation '|' translation | dict_translation | func_translation[X] | pattern
dict_translation ::= constant ':' constant
func_translation[x] ::= var_matcher[X] ':' func[X]
var_matcher[X] ::= '`' identifier '`' pattern
identifier ::= \w
func[X] ::= '`' PYTHON_EXPRESSION[X] '`'

----

pattern ::= constant | regex_pattern
constant ::= [\w\.]*
regex_pattern ::= '(' REGEX ')'

input_expr ::= input_expr | input_expr | pattern | '{' input_var '}'
input_var ::= identifier | identifier ':' pattern

output_expr ::= output_expr | output_expr | constant | '{' translator '}'
translator ::= identifier | dict_translator | func_translator
dict_translator ::= identifier ':' dict_translation
dict_translation ::= dict_translation '|' dict_translation | pattern '->' constant
func_translator ::= '`' PYTHON_EXPRESSION '`'